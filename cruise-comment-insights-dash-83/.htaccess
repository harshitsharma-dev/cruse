# Force correct MIME types for JavaScript modules
<IfModule mod_mime.c>
    # Remove any existing MIME type and force correct ones
    RemoveType .js
    RemoveType .mjs
    RemoveType .css
    
    # JavaScript and JSON files - use most compatible MIME type
    AddType text/javascript .js
    AddType text/javascript .mjs
    AddType application/json .json
    
    # CSS files
    AddType text/css .css
    
    # Font files
    AddType font/woff .woff
    AddType font/woff2 .woff2
    AddType font/ttf .ttf
    AddType font/otf .otf
    AddType application/font-woff .woff
    AddType application/font-woff2 .woff2
    
    # Image files
    AddType image/svg+xml .svg
    AddType image/webp .webp
    
    # Ensure module scripts are served with correct MIME type
    <FilesMatch "\.m?js$">
        ForceType text/javascript
        Header set Content-Type "text/javascript; charset=utf-8"
    </FilesMatch>
    
    # Force correct MIME type for CSS
    <FilesMatch "\.css$">
        ForceType text/css
        Header set Content-Type "text/css; charset=utf-8"
    </FilesMatch>
      # Set proper MIME types for module scripts
    <FilesMatch "\.js$">
        Header set Content-Type "text/javascript; charset=utf-8"
    </FilesMatch>
    
    <FilesMatch "\.mjs$">
        Header set Content-Type "text/javascript; charset=utf-8"
    </FilesMatch>
</IfModule>

# Enable compression for static files
<IfModule mod_deflate.c>
    # Compress HTML, CSS, JavaScript, Text, XML and fonts
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
    AddOutputFilterByType DEFLATE application/x-font
    AddOutputFilterByType DEFLATE application/x-font-opentype
    AddOutputFilterByType DEFLATE application/x-font-otf
    AddOutputFilterByType DEFLATE application/x-font-truetype
    AddOutputFilterByType DEFLATE application/x-font-ttf
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE font/opentype
    AddOutputFilterByType DEFLATE font/otf
    AddOutputFilterByType DEFLATE font/ttf
    AddOutputFilterByType DEFLATE image/svg+xml
    AddOutputFilterByType DEFLATE image/x-icon
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/javascript
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE application/json

    # Aggressive compression for JS modules and chunks
    SetEnvIfNoCase Request_URI "\.js$" COMPRESS_JS
    SetEnvIfNoCase Request_URI "assets.*\.js$" COMPRESS_JS_ASSETS
    SetEnvIfNoCase Request_URI "chunk.*\.js$" COMPRESS_JS_CHUNKS
    
    # Higher compression level for UI library chunks
    <FilesMatch "\.(js|css)$">
        SetOutputFilter DEFLATE
        SetEnvIfNoCase Request_URI "(react|radix|lucide|tanstack)" HEAVY_COMPRESS
    </FilesMatch>

    # Remove browser bugs (only needed for really old browsers)
    BrowserMatch ^Mozilla/4 gzip-only-text/html
    BrowserMatch ^Mozilla/4\.0[678] no-gzip
    BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
    Header append Vary User-Agent
</IfModule>

# Enable Brotli compression if available
<IfModule mod_brotli.c>
    AddOutputFilterByType BROTLI_COMPRESS text/plain
    AddOutputFilterByType BROTLI_COMPRESS text/css
    AddOutputFilterByType BROTLI_COMPRESS text/javascript
    AddOutputFilterByType BROTLI_COMPRESS text/html
    AddOutputFilterByType BROTLI_COMPRESS text/xml
    AddOutputFilterByType BROTLI_COMPRESS application/javascript
    AddOutputFilterByType BROTLI_COMPRESS application/json
    AddOutputFilterByType BROTLI_COMPRESS application/xml
    AddOutputFilterByType BROTLI_COMPRESS application/xhtml+xml
    AddOutputFilterByType BROTLI_COMPRESS application/rss+xml
    AddOutputFilterByType BROTLI_COMPRESS application/atom_xml
    AddOutputFilterByType BROTLI_COMPRESS image/svg+xml
</IfModule>

# Set cache headers for static assets
<IfModule mod_expires.c>
    ExpiresActive on
    
    # Images
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month" 
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType image/svg+xml "access plus 1 month"
    ExpiresByType image/x-icon "access plus 1 year"
    
    # Fonts
    ExpiresByType font/ttf "access plus 1 year"
    ExpiresByType font/woff "access plus 1 year"
    ExpiresByType font/woff2 "access plus 1 year"
    ExpiresByType application/font-woff "access plus 1 year"
    
    # CSS and JavaScript
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType text/javascript "access plus 1 month"
    
    # HTML
    ExpiresByType text/html "access plus 1 day"
    
    # Default
    ExpiresDefault "access plus 1 week"
</IfModule>

# Add cache control headers
<IfModule mod_headers.c>    # Cache UI library chunks for 1 year (they have content hashes)
    <FilesMatch "assets/(vendor|ui|charts|icons|query).*\.js$">
        Header set Cache-Control "max-age=31536000, public, immutable"
        Header set X-Content-Type-Options "nosniff"
    </FilesMatch>
    
    # Cache other static assets for 1 year
    <FilesMatch "\.(ico|pdf|flv|jpg|jpeg|png|gif|js|css|swf|woff|woff2|ttf|svg)$">
        Header set Cache-Control "max-age=31536000, public"
    </FilesMatch>
    
    # Cache HTML for 1 hour
    <FilesMatch "\.(html|htm)$">
        Header set Cache-Control "max-age=3600, public, must-revalidate"
    </FilesMatch>
    
    # Special caching for font files (longer cache)
    <FilesMatch "\.(woff|woff2|ttf|otf|eot)$">
        Header set Cache-Control "max-age=63072000, public, immutable"
        Header set Access-Control-Allow-Origin "*"
    </FilesMatch>
    
    # Enable CORS for assets to allow CDN usage
    <FilesMatch "\.(js|css|woff|woff2|ttf|otf|eot|svg)$">
        Header set Access-Control-Allow-Origin "*"
        Header set Access-Control-Allow-Methods "GET, POST, OPTIONS"
        Header set Access-Control-Allow-Headers "Content-Type"
    </FilesMatch>
    
    # Add security headers
    Header always set X-Content-Type-Options "nosniff"
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-XSS-Protection "1; mode=block"
    
    # Remove server signature
    Header unset Server
    Header unset X-Powered-By
      # Add preload hints for critical resources
    <FilesMatch "index\.html$">
        Header add Link "</assets/vendor-C_ycmrIY.js>; rel=preload; as=script"
        Header add Link "</assets/index-gzQW87nY.css>; rel=preload; as=style"
    </FilesMatch>
</IfModule>

# SPA Routing - Redirect all routes to index.html for React Router
<IfModule mod_rewrite.c>
    RewriteEngine On
    
    # Handle Angular and React Router
    # Send all requests to index.html except for files that exist
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} !^/api/
    RewriteRule ^.*$ /index.html [L]
    
    # Optional: Force HTTPS (uncomment if using SSL)
    # RewriteCond %{HTTPS} off
    # RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
</IfModule>
